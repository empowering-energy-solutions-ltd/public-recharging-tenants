{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction - Recharging tenants","text":"<p>Background:</p> <p>Many large comercial and public-sector sites can have on-site tenants such as shops, residential tenants &amp; parts of the business that require individual energy billing. Recharging tenants can be used by site energy managers to recharge such tenants using their submeters and the overall site energy invoices.</p> <p>Recharging tenants allows sites to: - Recharge tenants for their energy consumption. - Apply fixed charges for their use of site systems. - Create a seperate spreadsheet for both commercial and residential tenants.</p>"},{"location":"import_data/","title":"Data imports","text":""},{"location":"import_data/#src.data.import_data.combine_elec","title":"<code>combine_elec(elec_invoice_path)</code>","text":"<p>This function imports the second electrical invoice and combines it with the first.</p> <p>Parameters:</p> Name Type Description Default <code>elec_invoice_path</code> <code>Path</code> <p>The path to the second electrical invoice file.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A pandas dataframe containing the electrical invoice data in the correct format.</p>"},{"location":"import_data/#src.data.import_data.import_water","title":"<code>import_water(water_invoice_path)</code>","text":"<p>This function imports the water invoice data and orders it into the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>water_invoice_path</code> <code>Path</code> <p>The path to the water invoice file.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A pandas dataframe containing the water invoice data in the correct format.</p>"},{"location":"import_data/#src.data.import_data.load_data","title":"<code>load_data(path, csv)</code>","text":"<p>This allows the import of both .csv and excel files that have multiple different sheets using the csv boolean value.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the file to be imported.  </p> required <code>csv</code> <code>bool</code> <p>A boolean value that is True if the file is a .csv file and False if it is an excel file.  </p> required <p>Returns:</p> Type Description <code>DataFrame | dict[str, DataFrame]</code> <p>pd.DataFrame: A pandas dataframe containing the data from the file.  </p> <code>DataFrame | dict[str, DataFrame]</code> <p>dict[str, pd.DataFrame]: A dictionary of pandas dataframes containing the data from the different sheets of the excel file.</p>"},{"location":"import_data/#src.data.import_data.meter_readings","title":"<code>meter_readings(path)</code>","text":"<p>This function imports the meter readings from the site and orders it into the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the meter readings file.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A pandas dataframe containing the meter readings data in the correct format.</p>"},{"location":"import_data/#src.data.import_data.order_data","title":"<code>order_data(dataf)</code>","text":"<p>This function orders the data in the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be ordered.</p> required"},{"location":"import_data/#src.data.import_data.order_gas_invoice_data","title":"<code>order_gas_invoice_data(gas_invoice_path)</code>","text":"<p>This function imports the gas invoice data and orders it into the correct format.</p> <p>Parameters:</p> Name Type Description Default <code>gas_invoice_path</code> <code>Path</code> <p>The path to the gas invoice file.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A pandas dataframe containing the gas invoice data in the correct format.</p>"},{"location":"report/","title":"Recharging tenants","text":""},{"location":"report/#src.models.report.Site","title":"<code>Site</code>  <code>dataclass</code>","text":"<p>The site class generates the invoices for each tenant of the main site.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the site.</p> <code>id_mappings</code> <code>dict[str, dict[str, str]]</code> <p>A dictionary containing the mappings of the tenants to the site meters.</p> <code>fixed_rate_mappings</code> <code>dict[str, dict[str, float]]</code> <p>A dictionary containing the mappings of the tenants to their fixed rates.</p> <code>readings_multiplier</code> <code>dict[str, dict[str, float]]</code> <p>A dictionary containing the mappings of the tenants to the multipliers for their meter readings.</p> <code>reading_path</code> <code>Path</code> <p>The path to the meter readings file.</p> <code>water_path</code> <code>Path</code> <p>The path to the water invoice file.</p> <code>gas_path</code> <code>Path</code> <p>The path to the gas invoice file.</p> <code>electric_path_1</code> <code>Path</code> <p>The path to the first electricity invoice file.</p> <code>electric_path_2</code> <code>Path</code> <p>The path to the second electricity invoice file.  </p> <code>historical_charges_path</code> <code>Path</code> <p>The path to the historical charges file.</p> <code>historical_readings_path</code> <code>Path</code> <p>The path to the historical readings file.</p> <code>save_folder</code> <code>Path</code> <p>The path to the folder where the results will be saved.</p> <p>Methods:</p> Name Description <code>create_saving_path</code> <p>This function creates the path where the results will be saved.</p> <code>get_data</code> <p>This function imports the meter readings file.</p> <code>merge_utility_rows</code> <p>This function merges the rows of the meter readings file that correspond to the same meter.</p> <code>calculate_energy_consumption</code> <p>This function calculates the energy consumption of a meter.</p> <code>outflow_conversion</code> <p>This function converts the outflow readings to negative values.</p> <code>reorder_data</code> <p>This function reorders the meter readings file.</p> <code>apply_id_mappings</code> <p>This function applies the id mappings to the meter readings file.</p> <code>invoice_history</code> <p>This function imports the invoice history files.</p> <code>apply_recharge_rates</code> <p>This function applies the recharge rates to the consumption data.</p> <code>apply_fixed_mappings</code> <p>Applies fixed charges to the data</p> <code>apply_readings_multiplier</code> <p>Applies readings multiplier to the dataframe</p> <code>calculate_charges</code> <p>Calculates the net and gross charge before VAT</p> <code>new_form</code> <p>Creates the new form for next month to be filled out</p> <code>historical_charges</code> <p>Adds the current months charges to the historical charges file</p> <code>historical_readings</code> <p>Adds the current months readings to the historical readings file</p> <code>split_dataframe_by_commercial</code> <p>Splits the dataframe into two based on whether the tenant is residencial or commercial</p> <code>recharging_tenants</code> <p>Recharges the tenants. Main function to be called.</p>"},{"location":"report/#src.models.report.Site.apply_fixed_mappings","title":"<code>apply_fixed_mappings()</code>","text":"<p>Applies fixed charges to the data</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Dataframe with fixed charges applied</p>"},{"location":"report/#src.models.report.Site.apply_id_mappings","title":"<code>apply_id_mappings()</code>","text":"<p>This function applies the id mappings to the meter readings file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The meter readings file with the id mappings applied.</p>"},{"location":"report/#src.models.report.Site.apply_readings_multiplier","title":"<code>apply_readings_multiplier()</code>","text":"<p>Applies readings multiplier to the dataframe</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Dataframe with readings multiplier applied</p>"},{"location":"report/#src.models.report.Site.apply_recharge_rates","title":"<code>apply_recharge_rates(days_range=1)</code>","text":"<p>This function applies the recharge rates to the consumption data.</p> <p>Parameters:</p> Name Type Description Default <code>days_range</code> <code>Optional[int]</code> <p>The number of days to look back for the recharge rate, by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The consumption data with the recharge rates applied.</p>"},{"location":"report/#src.models.report.Site.calculate_charges","title":"<code>calculate_charges()</code>","text":"<p>Calculates the net and gross charge before VAT</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Dataframe with net and gross charge before VAT calculated</p>"},{"location":"report/#src.models.report.Site.calculate_energy_consumption","title":"<code>calculate_energy_consumption(row)</code>","text":"<p>Calculates the energy consumption of a meter.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Series</code> <p>A row of the meter readings file.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The consumption of the meter.</p>"},{"location":"report/#src.models.report.Site.create_saving_path","title":"<code>create_saving_path(parent_folder, recharging_date)</code>","text":"<p>This function creates the path where the results will be saved.</p> <p>Parameters:</p> Name Type Description Default <code>parent_folder</code> <code>Path</code> <p>The path to the parent folder where the results will be saved.  </p> required <p>`recharging_date (datetime): The date of the recharging.</p>"},{"location":"report/#src.models.report.Site.get_data","title":"<code>get_data()</code>","text":"<p>This function imports the meter readings file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The meter readings file.</p>"},{"location":"report/#src.models.report.Site.historical_charges","title":"<code>historical_charges()</code>","text":"<p>Adds the current months charges to the historical charges file</p>"},{"location":"report/#src.models.report.Site.historical_readings","title":"<code>historical_readings()</code>","text":"<p>Adds the current months readings to the historical readings file</p>"},{"location":"report/#src.models.report.Site.invoice_history","title":"<code>invoice_history()</code>","text":"<p>This function imports the invoice history files.</p> <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame, DataFrame]</code> <p>tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: The gas, electricity and water invoice history files.</p>"},{"location":"report/#src.models.report.Site.merge_utility_rows","title":"<code>merge_utility_rows()</code>","text":"<p>This function merges the rows of the meter readings file that correspond to the same meter.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The meter readings file with the rows merged.</p>"},{"location":"report/#src.models.report.Site.new_form","title":"<code>new_form()</code>","text":"<p>Creates the new form for next month to be filled out</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Dataframe with the new form for next month to be filled out</p>"},{"location":"report/#src.models.report.Site.outflow_conversion","title":"<code>outflow_conversion(row)</code>","text":"<p>This function converts the outflow readings to negative values.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Series</code> <p>A row of the meter readings file.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The consumption of the meter.</p>"},{"location":"report/#src.models.report.Site.recharging_tenants","title":"<code>recharging_tenants()</code>","text":"<p>Recharges the tenants. Main function to be called.</p>"},{"location":"report/#src.models.report.Site.reorder_data","title":"<code>reorder_data()</code>","text":"<p>This function reorders the meter readings file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The meter readings file reordered.</p>"},{"location":"report/#src.models.report.Site.split_dataframe_by_commercial","title":"<code>split_dataframe_by_commercial()</code>","text":"<p>Splits the dataframe into two based on whether the tenant is residencial or commercial</p>"}]}